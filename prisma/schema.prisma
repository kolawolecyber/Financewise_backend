// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password      String
  monthlyIncome Float?
  currency      String?  @default("NGN")
  financialGoal String?
  profilePic    String?
  createdAt     DateTime @default(now())

  budgets  Budget[] // One-to-many
  expenses Expense[] // ✅ Add this line for relation with Expense
  goal     Goal[]
  category Category[]
  Transaction Transaction[]
}

model Budget {
  id        Int      @id @default(autoincrement())
  title     String
  amount    Float
  category  String
  month     String
  userId    Int
  createdAt DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id])
  expenses Expense[]   @relation("BudgetExpenses") // ✅ Add this line for relation with Expense
}

model Expense {
  id          Int      @id @default(autoincrement())
  description String
  amount      Float
  category    String?
  date        DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  budgetId Int
  budget   Budget  @relation("BudgetExpenses", fields: [budgetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Goal {
  id            Int      @id @default(autoincrement())
  title         String
  targetAmount  Float
   savedAmount  Float    @default(0) 
  targetDate    DateTime
  status        String   @default("In Progress")
  userId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  type        String    // "income", "expense", etc.
  color       String?   // Optional: for UI tagging (e.g., "#ff0000")
  userId      Int
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
  Transaction Transaction[] 
}

model Transaction {
  id         Int       @id @default(autoincrement())
  title      String
  amount     Float
  type       String    // "expense" or "income"
  date       DateTime  @default(now())
  userId     Int
  categoryId Int

  user       User      @relation(fields: [userId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
